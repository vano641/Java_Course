import java.util.Stack;

/**
 * task15 Дана строка содержащая только символы '(' ; ')' ; '{' ; '}' ; '[' и ']', определите,
 * является ли входная строка логически правильной?
 * Входная строка Логически првильная, если:
 * 1) Открытые скобки должны быть Закрыты скобками Того же типа.
 * 2) Открытые скобки должны быть закрыты в Правильм Порядке. Каждая закрывающая скобка
 * имеет соответствующую открытую скобку того же типа.
 * Пример:
 * 1)()[] = true
 * 2)() = true
 * 3) {[()]} = true
 * 4) ()() = true
 * 5) )()( = false
 */
public class task15 {

    public static void main(String[] args) {
        String s = "{[()]}";
        task15 t = new task15();
        System.out.println(t.validate(s));
    }
// решение задачи основанно на Стеке
    public boolean validate(String s){
        Stack<Character> stack = new Stack<>();
// пройти по каждому элементу входящему в иходную строку
        for (char c : s.toCharArray()) {
// в начале мы проверяем является ли символ "с" - символом открывающейся скобки
// если да, то добавляем его в Стек
            if (c == '(' || c == '{' || c == '[') {
                stack.push(c);
// проверяем ситуации когда наш символ не является символом какой либо открывающейся скобки
// каджая закрыв скобка должна именть открытую скобку того же типа
            } else if (stack.isEmpty()){
                return false; // если мы имеем символ закрытой скоби а Стек до этого путой
// , то это не валидная ситуация, тоже самое для других типов скобок
            } else if (c == ')' && stack.pop() != '('){
                return false;
            } else if (c == ']' && stack.pop() != '['){
                return false;
            } else if (c == '}' && stack.pop() != '{'){
                return false;
            }
        }
        return stack.empty(); // проверка, является ли наш стек пустым после всех преобразований
    }
}